(defpoll date
  :interval "60s"
  :initial '{"week_day":"","month":"","day":""}'
  `date +'{"week_day":"%a","month":"%b","day":"%d"}'`
)

(defpoll time
  :interval "30s"
  :initial '{"hour":"","minute":""}'
  `date +'{"hour":"%H","minute":"%M"}'`
)

(defpoll battery_remaining_time
  :interval "10s"
  :initial '{"h":0,"m":0,"s":0}'
  `
    acpi -b | \
        cut -d ' ' -f5 | \
        cut -d ':' -f1- --output-delimiter=' ' | \
        jq -rcs '{"h": .[0], "m": .[1], "s": .[2]}'
  `
)

(deflisten media_status
  :initial ""
  `playerctl -F status 2> /dev/null`
)

(deflisten media_artist
  :initial ""
  `playerctl -F metadata --format '{{ lc(artist) }}' 2> /dev/null`
)

(deflisten media_title
  :initial ""
  `playerctl -F metadata --format '{{ trunc(lc(title), 20) }}' 2> /dev/null`
)

(deflisten media_position
  :initial ""
  `playerctl -F metadata --format '{{ duration(position) }}' 2> /dev/null`
)

(deflisten media_length
  :initial ""
  `playerctl -F metadata --format '{{ duration(mpris:length) }}' 2> /dev/null`
)

(deflisten workspaces_json
  :initial `[]`
  `sh ~/.config/eww-scripts/workspaces.sh`
)

(deflisten network_json
  :initial `{"status":"unavailable","ssid":"","signal":"0"}`
  `sh ~/.config/eww-scripts/network.sh`
)

(deflisten audio_json
  :intial `{"device":"None","volume":0,"muted":true}`
  `sh ~/.config/eww-scripts/audio.sh`
)

(deflisten backlight_level
  :intial `0`
  `sh ~/.config/eww-scripts/backlight.sh`
)

(defvar reveal_backlight false)
(defvar reveal_audio false)

;; reusable widgets
(defwidget revealer-on-hover [do_reveal reveal_var_name]
  (eventbox
    :onhover "${EWW_CMD} update ${reveal_var_name}=true"
    :onhoverlost "${EWW_CMD} update ${reveal_var_name}=false"
    (box
      ;; :space-evenly false
      (overlay
        (revealer
          :reveal {!do_reveal}
          :transition "crossfade"
          :duration "250ms"
          (children :nth 0)
        )
        (revealer
          :reveal do_reveal
          :transition "crossfade"
          :duration "250ms"
          (children :nth 1)
        )
      )
    )
  )
)

;; window
(defwindow bar
  :class "bar"
  :monitor 0
  :exclusive true
  :geometry (geometry
      :x "0%"
      :y "0%"
      :width "1890px"
      :height "50px"
      :anchor "top center"
  )
  :stacking "fg"
  :reserve (struts
      :distance "40px"
      :side "top"
  )
  :windowtype "dock"
  :wm-ignore false
  (center-box)
)

;; layout
(defwidget center-box []
  (centerbox
    :class "center_box"
    :orientation "h"
    (left)
    (center)
    (right)
  )
)

(defwidget left []
  (box
    :orientation "h"
    :class "left"
    :space-evenly false
    :halign "start"
    :spacing 8
    (workspaces)
    (spacer)
    (resources)
  )
)

(defwidget center []
  (box
    :orientation "h"
    :class "center"
    :space-evenly false
    :halign "center"
    (datetime)
  )
)

(defwidget right []
  (box
    :orientation "h"
    :class "right"
    :space-evenly false
    :spacing 5
    :halign "end"
    (media)
    (spacer
      :visible {"${media_status}" != ""}
    )
    (backlight)
    (audio)
    (network)
    (battery)
  )
)

;; widgets
(defwidget spacer [?visible]
  (label
    :width 25
    :visible visible
    :class "text-spacer"
    :text "|"
  )
)

(defwidget workspaces []
  (box
    :orientation "h"
    :class "workspaces"
    :space-evenly false
    :valign "center"
    :spacing 2
    (for workspace in workspaces_json
      (eventbox
        :onclick `${!workspace.active ? "hyprctl dispatch workspace ${workspace.id}" : ""}`
        :cursor `${!workspace.active ? "pointer" : "default"}`
        :width 18
        (box
          :class `${workspace.active ? "active-workspace" : "inactive-workspace"}`
          (label
            :text `${
              workspace.id == "1" ? "Ⅰ" :
              workspace.id == "2" ? "Ⅱ" :
              workspace.id == "3" ? "Ⅲ" :
              workspace.id == "4" ? "Ⅳ" :
              workspace.id == "5" ? "Ⅴ" :
              workspace.id == "6" ? "Ⅵ" :
              workspace.id == "7" ? "Ⅶ" :
              workspace.id == "8" ? "Ⅷ" :
              workspace.id == "9" ? "Ⅸ" : ""
            }`
          )
        )
      )
    )
  )
)

(defvar reveal_resources false)
(defvar reveal_resources_stay false)

(defwidget resources []
  (box
    :orientation "h"
    :class "resources"
    :space-evenly false
    :spacing 5
    (eventbox
      :onrightclick {
        reveal_resources_stay ?
          "${EWW_CMD} update reveal_resources_stay=false" :
          "${EWW_CMD} update reveal_resources_stay=true"
      }
      :onhover { !reveal_resources_stay ? "${EWW_CMD} update reveal_resources=true" : "" }
      :onhoverlost { !reveal_resources_stay ? "${EWW_CMD} update reveal_resources=false" : "" }
      (overlay
        (revealer
          :reveal { reveal_resources || reveal_resources_stay }
          :transition "slideright"
          :duration "500ms"
          (box
            :space-evenly false
            :spacing 10
            (label
              :text " "
            )
            (label
              :text " "
            )
            (label
              :text " "
            )
            (label
              :text " "
            )
          )
        )
        (revealer
          :reveal { !reveal_resources && !reveal_resources_stay }
          :transition "crossfade"
          :duration "250ms"
          (box
            :class "resource-icon"
            :space-evenly false
            (label
              :text "󱕎 "
            )
          )
        )
      )
    )
  )
)

(defwidget datetime []
  (box
    :orientation "h"
    :class "datetime"
    :space-evenly false
    :spacing 5
    (label
      :class "date"
      :text "${date.week_day} ${date.month} ${date.day}"
    )
    (spacer)
    (label
      :class "time"
      :text "${time.hour}:${time.minute}"
    )
  )
)

(defwidget media []
  (box
    :visible {"${media_status}" != ""}
    :orientation "h"
    :class "media"
    :space-evenly false
    :valign "center"
    (eventbox
      :onclick "playerctl play-pause"
      :onrightclick "playerctl next"
      :onmiddleclick "playerctl previous"
      :cursor "pointer"
      (box
        :space-evenly false
        :spacing 10
        (label
          :text "${media_position}/${media_length}"
        )
        (label
          :class "media-icon"
          :text `${media_status == "Playing" ? "󰏥" : "󰐌"}`
        )
        (label
          :text "${media_artist} - ${media_title}"
        )
      )
    )
  )
)

(defwidget backlight []
  (box
    :orientation "h"
    :class "backlight"
    :space-evenly false
    (revealer-on-hover
      :do_reveal reveal_backlight
      :reveal_var_name "reveal_backlight"
      (label
        :class "backlight-icon"
        :width 22
        :text `${
          backlight_level <= 10  ? "" :
          backlight_level <= 20  ? "" :
          backlight_level <= 30  ? "" :
          backlight_level <= 40  ? "" :
          backlight_level <= 50  ? "" :
          backlight_level <= 60  ? "" :
          backlight_level <= 70  ? "" :
          backlight_level <= 80  ? "" :
          backlight_level <= 90  ? "" : " "
        }`
      )
      (label
        :text "${backlight_level}"
      )
    )
  )
)

(defwidget audio []
  (box
    :orientation "h"
    :class "audio"
    :space-evenly false
    (revealer-on-hover
      :do_reveal reveal_audio
      :reveal_var_name "reveal_audio"
      (label
        :class "audio-icon"
        :width 22
        :text `${
          audio_json.muted ? " " :
          audio_json.device == "Headphones" ? " " :
          audio_json.device == "Speaker" ? " " : ""
        }`
      )
      (label
        :text "${audio_json.volume}"
      )
    )
  )
)

(defwidget network []
  (box
    :orientation "h"
    :class "network"
    :space-evenly false
    (eventbox
      :tooltip `${
        network_json.status == "connected" ? "${network_json.ssid} ${network_json.signal}%" :
        network_json.status == "disconnected" ? "Disconnected" :
        network_json.status == "unavailable" ? "Unavailable" : ""
      }`
      (label
        :class "network-icon"
        :width 22
        :text `${
          network_json.status == "connected" ? (
            network_json.signal >= 80 ? "󰤨 " :
            network_json.signal >= 60 ? "󰤥 " :
            network_json.signal >= 40 ? "󰤢 " :
            network_json.signal >= 20 ? "󰤟 " : "󰤯 "
          ) :
          network_json.status == "disconnected" ? "󰤮 " :
          network_json.status == "unavailable"  ? "󰤫 " : ""
        }`
      )
    )
  )
)

(defwidget battery []
  (box
    :orientation "h"
    :class "battery${EWW_BATTERY.BAT1.capacity <= 30 ? '-low' : ''}"
    :space-evenly false
    (eventbox
      :tooltip `${
        EWW_BATTERY.BAT1.status == "Discharging" ? (
          battery_remaining_time.h > 0 ?
            "${battery_remaining_time.h}h ${battery_remaining_time.m}m to empty" :
            "${battery_remaining_time.m}m to empty"
        ) :
          ;; battery charging
          battery_remaining_time.h > 0 ?
            "${battery_remaining_time.h}h ${battery_remaining_time.m}m to full" :
            "${battery_remaining_time.m}m to full"

      }`
      (box
        (label
          :text `${
            EWW_BATTERY.BAT1.status == "Charging" ? "󰂄" :
            EWW_BATTERY.BAT1.capacity >= 95 ? "󰁹" :
            EWW_BATTERY.BAT1.capacity >= 85 ? "󰂂" :
            EWW_BATTERY.BAT1.capacity >= 75 ? "󰂁" :
            EWW_BATTERY.BAT1.capacity >= 65 ? "󰂀" :
            EWW_BATTERY.BAT1.capacity >= 55 ? "󰁿" :
            EWW_BATTERY.BAT1.capacity >= 45 ? "󰁾" :
            EWW_BATTERY.BAT1.capacity >= 35 ? "󰁽" :
            EWW_BATTERY.BAT1.capacity >= 25 ? "󰁼" :
            EWW_BATTERY.BAT1.capacity >= 15 ? "󰁻" :
            EWW_BATTERY.BAT1.capacity >=  5 ? "󰁺" : "󰂎"
          }`
        )
        (label
          :text "${EWW_BATTERY.BAT1.capacity}"
        )
      )
    )
  )
)
